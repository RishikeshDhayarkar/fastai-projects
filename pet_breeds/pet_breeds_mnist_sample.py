# -*- coding: utf-8 -*-
"""pet_breeds_mnist_sample.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qECiGWmX0a5DAdSvsqM7U1VMMLtbYL-r

Oxford-pets, Resnet34
"""

from fastai import *
from fastai.vision import *
import matplotlib as plt
from PIL import Image

path = untar_data(URLs.PETS) # getting data(FAI)

path

path.ls() # checking paths

path_anno = path/'annotations'
path_img = path/'images'

fnames = get_image_files(path_img)
fnames[:5]

pattern_label = r'/([^/]+)_\d+.jpg$'
np.random.seed(1)

data = ImageDataBunch.from_name_re(path_img, fnames, pattern_label, ds_tfms=get_transforms(), size=224)

data.normalize(imagenet_stats) # normalize to make the mean and SD of different channels(RGB) of the imges to zero and one respectively

data.show_batch(rows=3, figsize=(7,6))

print(data.classes)

len(data.classes)

learn = create_cnn(data, models.resnet34, metrics=error_rate)

learn.fit_one_cycle(5)

learn.save('stage-1')

"""<h1>Results</h1>"""

interp = ClassificationInterpretation.from_learner(learn)

interp.plot_top_losses(9, figsize=(15, 11))

doc(interp.plot_top_losses)

interp.plot_confusion_matrix(figsize=(12,12), dpi=60)

interp.most_confused(min_val=3)

"""Unfreezing and fine tuning"""

learn.unfreeze()

learn.fit_one_cycle(1)

learn.load('stage-1')

learn.lr_find()

learn.recorder.plot()

learn.unfreeze()

learn.fit_one_cycle(2, max_lr=slice(1e-6, 5e-5))



"""<h1>Resnet50 model, bigger images, bigger batch size for transfer learning"""

data1 = ImageDataBunch.from_name_re(path_img, fnames, pattern_label, ds_tfms=get_transforms(), size=299, bs=64)

data1.normalize(imagenet_stats)

learn1 = create_cnn(data1, models.resnet50, metrics=error_rate)

learn1.fit_one_cycle(5)

learn1.save('stage-1-50')

learn1.unfreeze()

learn1.fit_one_cycle(1)

learn1.load('stage-1-50')

learn1.lr_find()

learn1.recorder.plot()

learn1.unfreeze()

learn1.fit_one_cycle(2, max_lr=slice(1e-6, 5e-4))

learn1.save('stage-1-50-mod')

"""<h1>MNIST_SAMPLE(3 and 7) creating databunch using 'from_folder'"""

path = untar_data(URLs.MNIST_SAMPLE)

path.ls()

path_labels = path/'labels'
path_valid = path/'valid'
path_train = path/'train'

path_train.ls()

tfms = get_transforms(do_flip=False)
data = ImageDataBunch.from_folder(path, ds_tfms=tfms, size=26)

data

data.show_batch(rows=3, figsize=(5,5))

learn = create_cnn(data, models.resnet18, metrics=accuracy)

learn.fit_one_cycle(5)

"""<h1>MNIST_SAMPLE(3 and 7) creating databunch using the 'labels.csv' file</h1>"""

df = pd.read_csv(path/'labels.csv')

df.head()

data_csv = ImageDataBunch.from_csv(path, ds_tfms=tfms, size=26)

data_csv

data_csv.show_batch(rows=2, figsize=(3,3))

data_csv.classes

learn_csv = cnn_learner(data_csv, models.resnet18, metrics=accuracy)

learn_csv.fit_one_cycle(5)

"""<h1>MNIST_SAMPLE(3 and 7) creating databunch using RegEx</h1>"""

pattern = r'/(\d)/\d+\.png$'

fn_paths = [path/name for name in df['name']]

fn_paths[:2]

data_reg = ImageDataBunch.from_name_re(path, fn_paths, pat=pattern, ds_tfms=tfms, size=26)

data_reg

data_reg.show_batch(rows=2, figsize=(3,3))

learn_reg = cnn_learner(data_reg, models.resnet18, metrics=accuracy)

learn_reg.fit(5)

"""<h1>MNIST_SAMPLE(3 and 7) creating databunch using RegEx with Lamba func</h1>"""

pattern = r'/(\d)/\d+\.png$'

fn_paths = [path/name for name in df['name']]

data_lambda = ImageDataBunch.from_name_func(path, fn_paths, ds_tfms=tfms, size=26, 
                                          label_func= lambda x : '3' if '/3/' in str(x) else '7')

data_lambda

data_lambda.show_batch(rows=2, figsize=(3,3))

learn_lambda = cnn_learner(data_lambda, models.resnet18, metrics=accuracy)

learn_lambda.fit(5)

"""<h1>MNIST_SAMPLE(3 and 7) creating databunch using RegEx with Lamba func</h1>"""

labels=[('3' if '/3/' in str(x) else '7') for x in fn_paths]

data_labels = ImageDataBunch.from_lists(path, fn_paths, ds_tfms=tfms, size=26, labels=labels)

data_labels

data_labels.show_batch(rows=2, figsize=(3,3))

learn_labels = cnn_learner(data_labels, models.resnet18, metrics=accuracy)

learn_labels.fit(5)



